// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fixit/engine/ent/community"
	"fixit/engine/ent/post"
	"fixit/engine/ent/predicate"
	"fixit/engine/ent/user"
	"fixit/engine/ent/vote"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetRole sets the "role" field.
func (pu *PostUpdate) SetRole(po post.Role) *PostUpdate {
	pu.mutation.SetRole(po)
	return pu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pu *PostUpdate) SetNillableRole(po *post.Role) *PostUpdate {
	if po != nil {
		pu.SetRole(*po)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetTags sets the "tags" field.
func (pu *PostUpdate) SetTags(s []string) *PostUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// AppendTags appends s to the "tags" field.
func (pu *PostUpdate) AppendTags(s []string) *PostUpdate {
	pu.mutation.AppendTags(s)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *PostUpdate) ClearTags() *PostUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetReplyTo sets the "reply_to" field.
func (pu *PostUpdate) SetReplyTo(u uuid.UUID) *PostUpdate {
	pu.mutation.SetReplyTo(u)
	return pu
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (pu *PostUpdate) SetNillableReplyTo(u *uuid.UUID) *PostUpdate {
	if u != nil {
		pu.SetReplyTo(*u)
	}
	return pu
}

// ClearReplyTo clears the value of the "reply_to" field.
func (pu *PostUpdate) ClearReplyTo() *PostUpdate {
	pu.mutation.ClearReplyTo()
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PostUpdate) SetUserID(id uuid.UUID) *PostUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PostUpdate) SetUser(u *User) *PostUpdate {
	return pu.SetUserID(u.ID)
}

// SetCommunityID sets the "community" edge to the Community entity by ID.
func (pu *PostUpdate) SetCommunityID(id uuid.UUID) *PostUpdate {
	pu.mutation.SetCommunityID(id)
	return pu
}

// SetCommunity sets the "community" edge to the Community entity.
func (pu *PostUpdate) SetCommunity(c *Community) *PostUpdate {
	return pu.SetCommunityID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (pu *PostUpdate) AddReplyIDs(ids ...uuid.UUID) *PostUpdate {
	pu.mutation.AddReplyIDs(ids...)
	return pu
}

// AddReplies adds the "replies" edges to the Post entity.
func (pu *PostUpdate) AddReplies(p ...*Post) *PostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddReplyIDs(ids...)
}

// SetParentID sets the "parent" edge to the Post entity by ID.
func (pu *PostUpdate) SetParentID(id uuid.UUID) *PostUpdate {
	pu.mutation.SetParentID(id)
	return pu
}

// SetNillableParentID sets the "parent" edge to the Post entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableParentID(id *uuid.UUID) *PostUpdate {
	if id != nil {
		pu = pu.SetParentID(*id)
	}
	return pu
}

// SetParent sets the "parent" edge to the Post entity.
func (pu *PostUpdate) SetParent(p *Post) *PostUpdate {
	return pu.SetParentID(p.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pu *PostUpdate) AddVoteIDs(ids ...uuid.UUID) *PostUpdate {
	pu.mutation.AddVoteIDs(ids...)
	return pu
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pu *PostUpdate) AddVotes(v ...*Vote) *PostUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVoteIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PostUpdate) ClearUser() *PostUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearCommunity clears the "community" edge to the Community entity.
func (pu *PostUpdate) ClearCommunity() *PostUpdate {
	pu.mutation.ClearCommunity()
	return pu
}

// ClearReplies clears all "replies" edges to the Post entity.
func (pu *PostUpdate) ClearReplies() *PostUpdate {
	pu.mutation.ClearReplies()
	return pu
}

// RemoveReplyIDs removes the "replies" edge to Post entities by IDs.
func (pu *PostUpdate) RemoveReplyIDs(ids ...uuid.UUID) *PostUpdate {
	pu.mutation.RemoveReplyIDs(ids...)
	return pu
}

// RemoveReplies removes "replies" edges to Post entities.
func (pu *PostUpdate) RemoveReplies(p ...*Post) *PostUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveReplyIDs(ids...)
}

// ClearParent clears the "parent" edge to the Post entity.
func (pu *PostUpdate) ClearParent() *PostUpdate {
	pu.mutation.ClearParent()
	return pu
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (pu *PostUpdate) ClearVotes() *PostUpdate {
	pu.mutation.ClearVotes()
	return pu
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (pu *PostUpdate) RemoveVoteIDs(ids ...uuid.UUID) *PostUpdate {
	pu.mutation.RemoveVoteIDs(ids...)
	return pu
}

// RemoveVotes removes "votes" edges to Vote entities.
func (pu *PostUpdate) RemoveVotes(v ...*Vote) *PostUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Role(); ok {
		if err := post.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Post.role": %w`, err)}
		}
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Post.user"`)
	}
	if pu.mutation.CommunityCleared() && len(pu.mutation.CommunityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Post.community"`)
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Role(); ok {
		_spec.SetField(post.FieldRole, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(post.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, post.FieldTags, value)
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(post.FieldTags, field.TypeJSON)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommunityTable,
			Columns: []string{post.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommunityTable,
			Columns: []string{post.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !pu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.ParentTable,
			Columns: []string{post.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.ParentTable,
			Columns: []string{post.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVotesIDs(); len(nodes) > 0 && !pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetRole sets the "role" field.
func (puo *PostUpdateOne) SetRole(po post.Role) *PostUpdateOne {
	puo.mutation.SetRole(po)
	return puo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRole(po *post.Role) *PostUpdateOne {
	if po != nil {
		puo.SetRole(*po)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetTags sets the "tags" field.
func (puo *PostUpdateOne) SetTags(s []string) *PostUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// AppendTags appends s to the "tags" field.
func (puo *PostUpdateOne) AppendTags(s []string) *PostUpdateOne {
	puo.mutation.AppendTags(s)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *PostUpdateOne) ClearTags() *PostUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetReplyTo sets the "reply_to" field.
func (puo *PostUpdateOne) SetReplyTo(u uuid.UUID) *PostUpdateOne {
	puo.mutation.SetReplyTo(u)
	return puo
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableReplyTo(u *uuid.UUID) *PostUpdateOne {
	if u != nil {
		puo.SetReplyTo(*u)
	}
	return puo
}

// ClearReplyTo clears the value of the "reply_to" field.
func (puo *PostUpdateOne) ClearReplyTo() *PostUpdateOne {
	puo.mutation.ClearReplyTo()
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PostUpdateOne) SetUserID(id uuid.UUID) *PostUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PostUpdateOne) SetUser(u *User) *PostUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetCommunityID sets the "community" edge to the Community entity by ID.
func (puo *PostUpdateOne) SetCommunityID(id uuid.UUID) *PostUpdateOne {
	puo.mutation.SetCommunityID(id)
	return puo
}

// SetCommunity sets the "community" edge to the Community entity.
func (puo *PostUpdateOne) SetCommunity(c *Community) *PostUpdateOne {
	return puo.SetCommunityID(c.ID)
}

// AddReplyIDs adds the "replies" edge to the Post entity by IDs.
func (puo *PostUpdateOne) AddReplyIDs(ids ...uuid.UUID) *PostUpdateOne {
	puo.mutation.AddReplyIDs(ids...)
	return puo
}

// AddReplies adds the "replies" edges to the Post entity.
func (puo *PostUpdateOne) AddReplies(p ...*Post) *PostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddReplyIDs(ids...)
}

// SetParentID sets the "parent" edge to the Post entity by ID.
func (puo *PostUpdateOne) SetParentID(id uuid.UUID) *PostUpdateOne {
	puo.mutation.SetParentID(id)
	return puo
}

// SetNillableParentID sets the "parent" edge to the Post entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableParentID(id *uuid.UUID) *PostUpdateOne {
	if id != nil {
		puo = puo.SetParentID(*id)
	}
	return puo
}

// SetParent sets the "parent" edge to the Post entity.
func (puo *PostUpdateOne) SetParent(p *Post) *PostUpdateOne {
	return puo.SetParentID(p.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (puo *PostUpdateOne) AddVoteIDs(ids ...uuid.UUID) *PostUpdateOne {
	puo.mutation.AddVoteIDs(ids...)
	return puo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (puo *PostUpdateOne) AddVotes(v ...*Vote) *PostUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVoteIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PostUpdateOne) ClearUser() *PostUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearCommunity clears the "community" edge to the Community entity.
func (puo *PostUpdateOne) ClearCommunity() *PostUpdateOne {
	puo.mutation.ClearCommunity()
	return puo
}

// ClearReplies clears all "replies" edges to the Post entity.
func (puo *PostUpdateOne) ClearReplies() *PostUpdateOne {
	puo.mutation.ClearReplies()
	return puo
}

// RemoveReplyIDs removes the "replies" edge to Post entities by IDs.
func (puo *PostUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *PostUpdateOne {
	puo.mutation.RemoveReplyIDs(ids...)
	return puo
}

// RemoveReplies removes "replies" edges to Post entities.
func (puo *PostUpdateOne) RemoveReplies(p ...*Post) *PostUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveReplyIDs(ids...)
}

// ClearParent clears the "parent" edge to the Post entity.
func (puo *PostUpdateOne) ClearParent() *PostUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (puo *PostUpdateOne) ClearVotes() *PostUpdateOne {
	puo.mutation.ClearVotes()
	return puo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (puo *PostUpdateOne) RemoveVoteIDs(ids ...uuid.UUID) *PostUpdateOne {
	puo.mutation.RemoveVoteIDs(ids...)
	return puo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (puo *PostUpdateOne) RemoveVotes(v ...*Vote) *PostUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Role(); ok {
		if err := post.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Post.role": %w`, err)}
		}
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Post.user"`)
	}
	if puo.mutation.CommunityCleared() && len(puo.mutation.CommunityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Post.community"`)
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Role(); ok {
		_spec.SetField(post.FieldRole, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(post.FieldTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, post.FieldTags, value)
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(post.FieldTags, field.TypeJSON)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommunityTable,
			Columns: []string{post.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.CommunityTable,
			Columns: []string{post.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !puo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.RepliesTable,
			Columns: []string{post.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.ParentTable,
			Columns: []string{post.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   post.ParentTable,
			Columns: []string{post.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   post.VotesTable,
			Columns: []string{post.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
