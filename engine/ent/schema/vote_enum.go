// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package schema

import (
	"fmt"
	"strings"
)

const (
	// VoteKindInteresting is a VoteKind of type interesting.
	VoteKindInteresting VoteKind = "interesting"
	// VoteKindTruthful is a VoteKind of type truthful.
	VoteKindTruthful VoteKind = "truthful"
)

var ErrInvalidVoteKind = fmt.Errorf("not a valid VoteKind, try [%s]", strings.Join(_VoteKindNames, ", "))

var _VoteKindNames = []string{
	string(VoteKindInteresting),
	string(VoteKindTruthful),
}

// VoteKindNames returns a list of possible string values of VoteKind.
func VoteKindNames() []string {
	tmp := make([]string, len(_VoteKindNames))
	copy(tmp, _VoteKindNames)
	return tmp
}

// String implements the Stringer interface.
func (x VoteKind) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VoteKind) IsValid() bool {
	_, err := ParseVoteKind(string(x))
	return err == nil
}

var _VoteKindValue = map[string]VoteKind{
	"interesting": VoteKindInteresting,
	"truthful":    VoteKindTruthful,
}

// ParseVoteKind attempts to convert a string to a VoteKind.
func ParseVoteKind(name string) (VoteKind, error) {
	if x, ok := _VoteKindValue[name]; ok {
		return x, nil
	}
	return VoteKind(""), fmt.Errorf("%s is %w", name, ErrInvalidVoteKind)
}
