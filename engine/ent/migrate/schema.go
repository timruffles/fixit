// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommunityColumns holds the columns for the "community" table.
	CommunityColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 128},
		{Name: "title", Type: field.TypeString, Size: 128},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "banner_image_url", Type: field.TypeString, Nullable: true},
		{Name: "geography", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// CommunityTable holds the schema information for the "community" table.
	CommunityTable = &schema.Table{
		Name:       "community",
		Columns:    CommunityColumns,
		PrimaryKey: []*schema.Column{CommunityColumns[0]},
	}
	// PostColumns holds the columns for the "post" table.
	PostColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString, Size: 128},
		{Name: "body", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"issue", "solution", "verification", "chat"}, Default: "issue"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "post_user", Type: field.TypeUUID},
		{Name: "post_community", Type: field.TypeUUID},
		{Name: "reply_to", Type: field.TypeUUID, Nullable: true},
	}
	// PostTable holds the schema information for the "post" table.
	PostTable = &schema.Table{
		Name:       "post",
		Columns:    PostColumns,
		PrimaryKey: []*schema.Column{PostColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_user_user",
				Columns:    []*schema.Column{PostColumns[7]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "post_community_community",
				Columns:    []*schema.Column{PostColumns[8]},
				RefColumns: []*schema.Column{CommunityColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "post_post_parent",
				Columns:    []*schema.Column{PostColumns[9]},
				RefColumns: []*schema.Column{PostColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 64},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 128},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// VoteColumns holds the columns for the "vote" table.
	VoteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"interesting", "truthful"}},
		{Name: "value", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "vote_post", Type: field.TypeUUID},
		{Name: "vote_user", Type: field.TypeUUID},
	}
	// VoteTable holds the schema information for the "vote" table.
	VoteTable = &schema.Table{
		Name:       "vote",
		Columns:    VoteColumns,
		PrimaryKey: []*schema.Column{VoteColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "vote_post_post",
				Columns:    []*schema.Column{VoteColumns[5]},
				RefColumns: []*schema.Column{PostColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "vote_user_user",
				Columns:    []*schema.Column{VoteColumns[6]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "vote_kind",
				Unique:  false,
				Columns: []*schema.Column{VoteColumns[1]},
			},
			{
				Name:    "vote_kind_vote_user",
				Unique:  true,
				Columns: []*schema.Column{VoteColumns[1], VoteColumns[6]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommunityTable,
		PostTable,
		UserTable,
		VoteTable,
	}
)

func init() {
	CommunityTable.Annotation = &entsql.Annotation{
		Table: "community",
	}
	PostTable.ForeignKeys[0].RefTable = UserTable
	PostTable.ForeignKeys[1].RefTable = CommunityTable
	PostTable.ForeignKeys[2].RefTable = PostTable
	PostTable.Annotation = &entsql.Annotation{
		Table: "post",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	VoteTable.ForeignKeys[0].RefTable = PostTable
	VoteTable.ForeignKeys[1].RefTable = UserTable
	VoteTable.Annotation = &entsql.Annotation{
		Table: "vote",
	}
}
