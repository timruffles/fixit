// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fixit/engine/ent/community"
	"fixit/engine/ent/post"
	"fixit/engine/ent/schema"

	uuid "github.com/gofrs/uuid/v5"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	communityFields := schema.Community{}.Fields()
	_ = communityFields
	// communityDescName is the schema descriptor for name field.
	communityDescName := communityFields[1].Descriptor()
	// community.NameValidator is a validator for the "name" field. It is called by the builders before save.
	community.NameValidator = func() func(string) error {
		validators := communityDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communityDescTitle is the schema descriptor for title field.
	communityDescTitle := communityFields[2].Descriptor()
	// community.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	community.TitleValidator = func() func(string) error {
		validators := communityDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communityDescID is the schema descriptor for id field.
	communityDescID := communityFields[0].Descriptor()
	// community.DefaultID holds the default value on creation for the id field.
	community.DefaultID = communityDescID.Default.(func() uuid.UUID)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[1].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = func() func(string) error {
		validators := postDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// postDescID is the schema descriptor for id field.
	postDescID := postFields[0].Descriptor()
	// post.DefaultID holds the default value on creation for the id field.
	post.DefaultID = postDescID.Default.(func() uuid.UUID)
}
