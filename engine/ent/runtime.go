// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fixit/engine/ent/community"
	"fixit/engine/ent/post"
	"fixit/engine/ent/schema"
	"fixit/engine/ent/user"
	"fixit/engine/ent/vote"
	"time"

	uuid "github.com/gofrs/uuid/v5"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	communityFields := schema.Community{}.Fields()
	_ = communityFields
	// communityDescName is the schema descriptor for name field.
	communityDescName := communityFields[1].Descriptor()
	// community.NameValidator is a validator for the "name" field. It is called by the builders before save.
	community.NameValidator = func() func(string) error {
		validators := communityDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communityDescTitle is the schema descriptor for title field.
	communityDescTitle := communityFields[2].Descriptor()
	// community.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	community.TitleValidator = func() func(string) error {
		validators := communityDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communityDescCreatedAt is the schema descriptor for created_at field.
	communityDescCreatedAt := communityFields[4].Descriptor()
	// community.DefaultCreatedAt holds the default value on creation for the created_at field.
	community.DefaultCreatedAt = communityDescCreatedAt.Default.(func() time.Time)
	// communityDescUpdatedAt is the schema descriptor for updated_at field.
	communityDescUpdatedAt := communityFields[5].Descriptor()
	// community.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	community.DefaultUpdatedAt = communityDescUpdatedAt.Default.(func() time.Time)
	// community.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	community.UpdateDefaultUpdatedAt = communityDescUpdatedAt.UpdateDefault.(func() time.Time)
	// communityDescID is the schema descriptor for id field.
	communityDescID := communityFields[0].Descriptor()
	// community.DefaultID holds the default value on creation for the id field.
	community.DefaultID = communityDescID.Default.(func() uuid.UUID)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[1].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = func() func(string) error {
		validators := postDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postFields[3].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	// postDescUpdatedAt is the schema descriptor for updated_at field.
	postDescUpdatedAt := postFields[4].Descriptor()
	// post.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	post.DefaultUpdatedAt = postDescUpdatedAt.Default.(func() time.Time)
	// post.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	post.UpdateDefaultUpdatedAt = postDescUpdatedAt.UpdateDefault.(func() time.Time)
	// postDescTags is the schema descriptor for tags field.
	postDescTags := postFields[5].Descriptor()
	// post.DefaultTags holds the default value on creation for the tags field.
	post.DefaultTags = postDescTags.Default.([]string)
	// postDescID is the schema descriptor for id field.
	postDescID := postFields[0].Descriptor()
	// post.DefaultID holds the default value on creation for the id field.
	post.DefaultID = postDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	voteFields := schema.Vote{}.Fields()
	_ = voteFields
	// voteDescCreatedAt is the schema descriptor for created_at field.
	voteDescCreatedAt := voteFields[3].Descriptor()
	// vote.DefaultCreatedAt holds the default value on creation for the created_at field.
	vote.DefaultCreatedAt = voteDescCreatedAt.Default.(func() time.Time)
	// voteDescUpdatedAt is the schema descriptor for updated_at field.
	voteDescUpdatedAt := voteFields[4].Descriptor()
	// vote.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	vote.DefaultUpdatedAt = voteDescUpdatedAt.Default.(func() time.Time)
	// vote.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	vote.UpdateDefaultUpdatedAt = voteDescUpdatedAt.UpdateDefault.(func() time.Time)
	// voteDescID is the schema descriptor for id field.
	voteDescID := voteFields[0].Descriptor()
	// vote.DefaultID holds the default value on creation for the id field.
	vote.DefaultID = voteDescID.Default.(func() uuid.UUID)
}
